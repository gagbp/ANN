import numpy as np

pontos = [(0.26, 6.279), (0.27, 5.981), (0.44, 5.496), (0.68, 5.537), (1.55, 7.058), (1.66, 6.552), (1.77, 6.406), (1.89, 7.71), (2.26, 6.885), (2.68, 7.473), (2.77, 8.454), (2.79, 7.647), (2.82, 7.224), (3.03, 7.384), (3.04, 7.925), (3.24, 7.556), (3.27, 8.128), (3.59, 8.006), (3.73, 8.613), (3.76, 9.773), (3.83, 9.539), (4.2, 9.895), (4.32, 10.395), (4.51, 8.739), (4.81, 9.968), (5.01, 9.428), (5.31, 10.727), (5.48, 10.258), (5.5, 10.085), (5.65, 10.795), (5.74, 10.57), (6.08, 10.932), (6.36, 11.376), (6.48, 10.544), (6.58, 11.84), (6.66, 12.334), (6.81, 11.477), (7.08, 12.537), (7.1, 11.473), (7.2, 11.093), (7.52, 12.912), (7.59, 11.82), (7.64, 11.46), (7.7, 11.732), (8.62, 13.715), (8.97, 14.27), (9.01, 13.65), (9.04, 13.701), (9.77, 14.38), (9.91, 13.637)]
n = len(pontos)
def vandermond(pontos):
    xs, ys = zip(*pontos)
    A = [[x ** k for k in range(n)] for x in xs]
    B = ys
    a = np.linalg.solve(A, B)
    return a

a = vandermond(pontos)

def p(x):
    px = sum([a[k] * x ** k for k in range(n)])
    return px

def sign(x):
    if x < 0:
        return str(x)
    return f'+{x}'

def equation(pontos):
    eq = "p(x)="
    eq += "".join([f'{sign(a[k])}*x**{k}' for k in range(n)])
    return eq

eq = equation(pontos)
print(eq)

# obs esse é o mesmo polinômio que o polinômio de Lagrange
